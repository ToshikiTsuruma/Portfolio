//=============================================================================
//
// モデルオブジェクト処理 [sceneModel.cpp]
// Author : 鶴間俊樹
//
//=============================================================================
#include "sceneModel.h"
#include "renderer.h"
#include "manager.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================

//=============================================================================
// デフォルトコンストラクタ
//=============================================================================
CSceneModel::CSceneModel()
{

}

//=============================================================================
// オーバーロードされたコンストラクタ
//=============================================================================
CSceneModel::CSceneModel(CModel::MODELTYPE typeModel, D3DXVECTOR3 pos, D3DXVECTOR3 rot, CModel* pParent, bool bOutLine)
{
	m_pModel = CModel::Create(typeModel, pos, rot, pParent, bOutLine);
}

//=============================================================================
// デストラクタ
//=============================================================================
CSceneModel::~CSceneModel()
{

}

//=============================================================================
// モデルオブジェクトの生成処理
//=============================================================================
CSceneModel* CSceneModel::Create(CModel::MODELTYPE type, D3DXVECTOR3 pos, D3DXVECTOR3 rot) {
	CSceneModel* pSceneModel;
	pSceneModel = new CSceneModel(type, pos, rot, nullptr, false);
	if (pSceneModel != nullptr) {
		pSceneModel->Init();
	}

	return pSceneModel;
}

//=============================================================================
// モデルオブジェクトの初期化処理
//=============================================================================
HRESULT CSceneModel::Init(void) {

	return S_OK;
}

//=============================================================================
// モデルオブジェクトの終了処理
//=============================================================================
void CSceneModel::Uninit(void) {
	if (m_pModel != nullptr) {
		m_pModel->Uninit();
		delete m_pModel;
		m_pModel = nullptr;
	}
	//オブジェクトの破棄
	Release();
}

//=============================================================================
// モデルオブジェクトの更新処理
//=============================================================================
void CSceneModel::Update(void) {

}

//=============================================================================
// モデルオブジェクトの描画処理
//=============================================================================
void CSceneModel::Draw(void) {
	LPDIRECT3DDEVICE9 pDevice = nullptr;	//デバイスへのポインタ
	//マネージャーの取得
	CManager* pManager = CManager::GetManager();	
	//レンダラーの取得
	CRenderer* pRenderer = nullptr;			
	if (pManager != nullptr) pRenderer = pManager->GetRenderer();
	//デバイスの取得
	if (pRenderer != nullptr) pDevice = pRenderer->GetDevice();
	//デバイスがnullの場合終了
	if (pDevice == nullptr) return;

	//初期化したワールドマトリックスを設定
	D3DXMATRIX mtxWorld;
	//ワールドマトリックスの初期化
	D3DXMatrixIdentity(&mtxWorld);
	//ワールドマトリックスの設定
	pDevice->SetTransform(D3DTS_WORLD, &mtxWorld);

	//-----------------------------------
	//モデルの描画
	//-----------------------------------
	if (m_pModel != nullptr) m_pModel->Draw();
}

//=============================================================================
// モデルの種類の取得
//=============================================================================
CModel::MODELTYPE CSceneModel::GetModelType(void) {
	if (m_pModel != nullptr) return m_pModel->GetModelType();
	return (CModel::MODELTYPE) NULL;
}

//=============================================================================
// モデルのポインタの取得
//=============================================================================
CModel* CSceneModel::GetPtrModel(void) {
	return m_pModel;
}

//=============================================================================
// モデルオブジェクトの位置情報の設定
//=============================================================================
void CSceneModel::SetPos(D3DXVECTOR3 pos) {	
	if (m_pModel != nullptr) m_pModel->SetPos(pos);
}

//=============================================================================
// モデルオブジェクトの位置情報の取得
//=============================================================================
D3DXVECTOR3 CSceneModel::GetPos(void) {
	if (m_pModel != nullptr) return m_pModel->GetPos();
	return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

//=============================================================================
// モデルオブジェクトの角度の設定
//=============================================================================
void CSceneModel::SetRot(D3DXVECTOR3 rot) { 
	if (m_pModel != nullptr) m_pModel->SetRot(rot);
}

//=============================================================================
// モデルオブジェクトの角度の取得
//=============================================================================
D3DXVECTOR3 CSceneModel::GetRot(void) {
	if (m_pModel != nullptr) return m_pModel->GetRot();
	return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}