//=============================================================================
//
// 3Dオブジェクト処理 [scene3D.cpp]
// Author : 鶴間俊樹
//
//=============================================================================
#include "scene3D.h"
#include "manager.h"
#include "renderer.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================

//=============================================================================
// デフォルトコンストラクタ
//=============================================================================
CScene3D::CScene3D()
{
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	D3DXMatrixIdentity(&m_mtxWorld);
	m_pVtxBuff = NULL;
	m_pIdxBuff = NULL;
	m_nNumVtx = 0;
	m_nNumIdx = 0;
}

//=============================================================================
// デストラクタ
//=============================================================================
CScene3D::~CScene3D()
{

}

//=============================================================================
// 生成処理
//=============================================================================
CScene3D* CScene3D::Create(void) {
	CScene3D* pScene3D;
	pScene3D = new CScene3D;
	if (pScene3D != NULL) {
		pScene3D->Init();
	}

	return pScene3D;
}

//=============================================================================
// 3Dオブジェクトの初期化処理
//=============================================================================
HRESULT CScene3D::Init(void) {

	return S_OK;
}

//=============================================================================
// 3Dオブジェクトの終了処理
//=============================================================================
void CScene3D::Uninit(void) {
	//頂点バッファの破棄
	if (m_pVtxBuff != NULL) {
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}
	//インデックスバッファの破棄
	if (m_pIdxBuff != NULL) {
		m_pIdxBuff->Release();
		m_pIdxBuff = NULL;
	}
	//オブジェクトの破棄
	Release();
}

//=============================================================================
// 3Dオブジェクトの更新処理
//=============================================================================
void CScene3D::Update(void) {

}

//=============================================================================
// 3Dオブジェクトの描画処理
//=============================================================================
void CScene3D::Draw(void) {
	LPDIRECT3DDEVICE9 pDevice = nullptr;	//デバイスへのポインタ
	//マネージャーの取得
	CManager* pManager = CManager::GetManager();	
	//レンダラーの取得
	CRenderer* pRenderer = nullptr;			
	if (pManager != nullptr) pRenderer = pManager->GetRenderer();
	//デバイスの取得
	if (pRenderer != nullptr) pDevice = pRenderer->GetDevice();
	//デバイスがnullの場合終了
	if (pDevice == nullptr) return;

	//テクスチャの取得
	LPDIRECT3DTEXTURE9 pTexture = CTexture::GetTexture(GetTexType());

	D3DXMATRIX mtxRot, mtxTrans;	//計算用マトリックス
	//ワールドマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxWorld);
	//向きを反映
	D3DXMatrixRotationYawPitchRoll(&mtxRot, m_rot.y, m_rot.x, m_rot.z);
	D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxRot);
	//位置を反映
	D3DXMatrixTranslation(&mtxTrans, m_pos.x, m_pos.y, m_pos.z);
	D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxTrans);
	//ワールドマトリックスの設定
	pDevice->SetTransform(D3DTS_WORLD, &m_mtxWorld);

	//頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_3D);
	//テクスチャの設定
	pDevice->SetTexture(0, pTexture); //テクスチャの設定
	//頂点バッファをデータストリームに設定
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_3D));
	//インデックスバッファをデータストリームに設定
	pDevice->SetIndices(m_pIdxBuff);

	//ポリゴンの描画
	pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP,
		0,
		0,
		m_nNumVtx,	//使用する頂点数
		0,	//ここの値が最初のインデックス
		m_nNumIdx - 2);	//三角形の数
}

//=============================================================================
// 位置座標の設定
//=============================================================================
void CScene3D::SetPos(D3DXVECTOR3 pos) {
	m_pos = pos;
}

//=============================================================================
// 位置座標の取得
//=============================================================================
D3DXVECTOR3 CScene3D::GetPos(void) {
	return m_pos;
}

//=============================================================================
// 角度の設定
//=============================================================================
void CScene3D::SetRot(D3DXVECTOR3 rot) { m_rot = rot; }

//=============================================================================
// 角度の取得
//=============================================================================
D3DXVECTOR3 CScene3D::GetRot(void) { return m_rot; }

//=============================================================================
// 頂点バッファのポインタのポインタを取得
//=============================================================================
LPDIRECT3DVERTEXBUFFER9* CScene3D::GetPtrVtxBuff(void) {
	return &m_pVtxBuff;
}

//=============================================================================
// インデックスバッファのポインタのポインタを取得
//=============================================================================
LPDIRECT3DINDEXBUFFER9* CScene3D::GetPtrIdxBuff(void) {
	return &m_pIdxBuff;
}

//=============================================================================
//頂点数の設定
//=============================================================================
void CScene3D::SetNumVtx(int nNumVtx) {
	m_nNumVtx = nNumVtx;
}

//=============================================================================
//頂点数の取得
//=============================================================================
int CScene3D::GetNumVtx(void) {
	return m_nNumVtx;
}

//=============================================================================
//インデックス数の設定
//=============================================================================
void CScene3D::SetNumIdx(int nNumIdx) {
	m_nNumIdx = nNumIdx;
}

//=============================================================================
//インデックス数の取得
//=============================================================================
int CScene3D::GetNumIdx(void) {
	return m_nNumIdx;
}

//=============================================================================
// 色の設定
//=============================================================================
void CScene3D::SetColor(D3DXCOLOR col) {
	if (m_pVtxBuff != NULL) {
		VERTEX_3D *pVtx;
		//頂点バッファのロック
		m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);
		// 頂点情報を設定
		pVtx[0].col = col;
		pVtx[1].col = col;
		pVtx[2].col = col;
		pVtx[3].col = col;

		//頂点バッファをアンロックする
		m_pVtxBuff->Unlock();
	}
}